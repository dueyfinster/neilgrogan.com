<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Neil Grogan</title>
    <link>/tags/python/</link>
    <description>Recent content in Python on Neil Grogan</description>
    <generator>Hugo 0.125.2</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Mar 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HomeAssistant Yellow Review</title>
      <link>/ha-yellow-review/</link>
      <pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate>
      <guid>/ha-yellow-review/</guid>
      <description>For Christmas as a gift to myself I bought a HomeAssistant Yellow. If you&amp;rsquo;re not familiar with HomeAssistant - it&amp;rsquo;s a one-stop-shop to control all your smart lights, plugs, sensors and anything else in your smart home. HomeAssistant is the software part and as it&amp;rsquo;s open source you can freely install it on any computer you have. In fact many people install HomeAssistant on a Raspberry Pi.&#xA;Yellow is their own custom hardware with a built in chip for Zigbee (and now Threads) protocol, along with Bluetooth, WiFi and audio out.</description>
    </item>
    <item>
      <title>Convert Bank Transactions XLS to CSV in Python</title>
      <link>/bank-xls-csv/</link>
      <pubDate>Fri, 25 Nov 2022 00:00:00 +0000</pubDate>
      <guid>/bank-xls-csv/</guid>
      <description>I&amp;rsquo;ve written previously on importing transactions to hledger/ledger from KBC bank in JavaScript and PTSB bank in Python. I took different approaches to each:&#xA;For KBC, you needed to log in and run Javascript which scrape the transaction table and download it formatted as CSV For PTSB, the script automatted logging in, get the transaction table and save locally as CSV Both approaches are valid - but suffer from the same issues: any change the bank makes to it website needs to be updated in the code.</description>
    </item>
    <item>
      <title>Python 3 In-Memory Zip File</title>
      <link>/py-bin-zip/</link>
      <pubDate>Sun, 14 Jan 2018 00:00:00 +0000</pubDate>
      <guid>/py-bin-zip/</guid>
      <description>In Python, BytesIO is the way to store binary data in memory. Most examples you’ll see using zip files in memory is to store string data and indeed the most common example you’ll find online from the zipfile module is zipfile.writestr(file_name, &amp;#34;Text Data&amp;#34;). But what if you want to store binary data of a PDF or Excel Spreadsheet that’s also in memory? You could use zipfile.write() (designed to take binary data) but then you can’t specify a filename (since our in-memory file was never written to a location on disk).</description>
    </item>
    <item>
      <title>Scraping Data from your Bank in Python</title>
      <link>/bank-tx-py/</link>
      <pubDate>Wed, 12 Jul 2017 00:00:00 +0000</pubDate>
      <guid>/bank-tx-py/</guid>
      <description>As part of my previous posts, I talked about ledger and plain text accounting. The only part missing is that you need a method to import transactions from your bank. For this I have been doing this by hand, bi-weekly. I would have to do the following:&#xA;Log in to online banking Go to the transactions page Select the date range for transactions I needed (double check last date of transaction in ledger at this point) Download the Microsoft Excel format file that wasn&amp;rsquo;t in the proper format Convert this Excel file into a CSV file that matched my import format (watch the dates, is it YYYY-MM-DD or DD/MM/YYYY?</description>
    </item>
    <item>
      <title>Fill hours worked in SAP Netweaver Automatically</title>
      <link>/autohours/</link>
      <pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate>
      <guid>/autohours/</guid>
      <description>Continuing the theme of automation, one of the most repetitive tasks if you work for a big company is timesheets. So I set out to rectify this by scripting it!&#xA;Start with you configuration, I named mine hours.ini:&#xA;[DEFAULT] url = FILL_ME_IN username = FILL_ME_IN password = FILL_ME_IN then we need the magic of Selenium to do the heavy lifting, so we install it:&#xA;$ pip3 install selenium I called this script, unsurprisingly hours.</description>
    </item>
  </channel>
</rss>
