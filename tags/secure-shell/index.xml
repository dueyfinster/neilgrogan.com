<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Secure-Shell on Neil Grogan</title><link>/tags/secure-shell/</link><description>Recent content in Secure-Shell on Neil Grogan</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 30 Nov 2016 00:00:00 +0000</lastBuildDate><atom:link href="/tags/secure-shell/index.xml" rel="self" type="application/rss+xml"/><item><title>Run Command on SSH Login</title><link>/ssh-login-cmd/</link><pubDate>Wed, 30 Nov 2016 00:00:00 +0000</pubDate><guid>/ssh-login-cmd/</guid><description>Do you need to run a command on SSH login? There are a lot of solutions on the web for this, but most of them are very complex. I stumbled across this easy method of using the authorized_keys file, simply add command=&amp;quot;ls -l&amp;quot; (replacing ls -l with something a bit more useful like tmux or screen) in front of the key fingerprint. This also means you can have different commands for different keys if you choose.</description></item><item><title>iOS Shells, Prompt vs. Mosh</title><link>/mosh/</link><pubDate>Tue, 15 Nov 2016 00:00:00 +0000</pubDate><guid>/mosh/</guid><description>I&amp;rsquo;m a big fan of the shell and the productivity it brings, you can have a text editor, command to run a server and more within easy reach. I use a shell at work, at home and on the go. On the go could be using my iPad or iPhone. One of the first SSH clients on iOS was iSSH, which I used many years ago. After this, Panic released a professional class application called Prompt.</description></item><item><title>SSH Config Aliases</title><link>/ssh-config/</link><pubDate>Thu, 20 Jun 2013 00:00:00 +0000</pubDate><guid>/ssh-config/</guid><description>If your like me and you deal with a lot of servers for development or test and do it from a Unix machine, I&amp;rsquo;ve got a really handy tip: SSH hostname pattern matching.
Say I&amp;rsquo;ve got a SSH config file like this (at ~/.ssh/config ):
host s* HostName atrcu%h.example.com User example1 Port 22 host b* HostName atrcx%h.example.com User example2 Port 22 host ??* HostName atvts%h.example.com User example5 Port 2205 The ssh man page explains this really well:</description></item><item><title>SSH Guide</title><link>/ssh-guide/</link><pubDate>Mon, 17 Nov 2008 00:00:00 +0000</pubDate><guid>/ssh-guide/</guid><description>**Note: This Guide was written for use by my Computer Science class on Linux (and Mac OS X where noted). I haven&amp;rsquo;t used SSH on Windows; but hopefully someone can make sure this guide works also on Windows by noting differences). SSH comes with nearly all Linux distros and all Mac OS X releases.
**
OS Specific Colours: Linux - Mac OS X - Windows
**
**
**Download SSH For Windows</description></item></channel></rss>