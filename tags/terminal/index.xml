<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Terminal on Neil Grogan</title><link>/tags/terminal/</link><description>Recent content in Terminal on Neil Grogan</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 30 Nov 2016 00:00:00 +0000</lastBuildDate><atom:link href="/tags/terminal/index.xml" rel="self" type="application/rss+xml"/><item><title>Run Command on SSH Login</title><link>/ssh-login-cmd/</link><pubDate>Wed, 30 Nov 2016 00:00:00 +0000</pubDate><guid>/ssh-login-cmd/</guid><description>Do you need to run a command on SSH login? There are a lot of solutions on the web for this, but most of them are very complex. I stumbled across this easy method of using the authorized_keys file, simply add command=&amp;quot;ls -l&amp;quot; (replacing ls -l with something a bit more useful like tmux or screen) in front of the key fingerprint. This also means you can have different commands for different keys if you choose.</description></item><item><title>iOS Shells, Prompt vs. Mosh</title><link>/mosh/</link><pubDate>Tue, 15 Nov 2016 00:00:00 +0000</pubDate><guid>/mosh/</guid><description>I&amp;rsquo;m a big fan of the shell and the productivity it brings, you can have a text editor, command to run a server and more within easy reach. I use a shell at work, at home and on the go. On the go could be using my iPad or iPhone. One of the first SSH clients on iOS was iSSH, which I used many years ago. After this, Panic released a professional class application called Prompt.</description></item><item><title>Why GNU Grep is fast</title><link>/grep-fast/</link><pubDate>Tue, 10 Dec 2013 00:00:00 +0000</pubDate><guid>/grep-fast/</guid><description>Worth a read for those wishing to optimise programs that process a lot of data. It proves that less really is more&amp;hellip;
Money quote:
The key to making programs fast is to make them do practically nothing.</description></item><item><title>Fish Shell for Ubuntu and OS X</title><link>/fish-shell/</link><pubDate>Sun, 08 Dec 2013 00:00:00 +0000</pubDate><guid>/fish-shell/</guid><description>A great guide to get up to speed with Fish shell. What is Fish? It&amp;rsquo;s a shell written from the ground up to be more easily understandable the the traditional shells (bash, tcsh). I don&amp;rsquo;t know yet if I&amp;rsquo;ll switch (anything you can do in Fish can be made to work in Bash). It&amp;rsquo;s an interesting concept and I&amp;rsquo;ll try it for a while&amp;hellip;</description></item><item><title>Quickly navigate your filesystem</title><link>/navigate-fs/</link><pubDate>Tue, 20 Aug 2013 00:00:00 +0000</pubDate><guid>/navigate-fs/</guid><description>The article is a great tip for those who spend a good chunk of the working day on the command line. I made some adjustments to Bash completion code to get it to work on Mac OS X:
Original:
_completemarks() { local curw=${COMP_WORDS[COMP_CWORD]} local wordlist=$(find $MARKPATH -type l -printf &amp;#34;%f\n&amp;#34;) COMPREPLY=($(compgen -W &amp;#39;${wordlist[@]}&amp;#39; -- &amp;#34;$curw&amp;#34;)) return 0 } complete -F _completemarks jump unmark My modified version (tested on Mac OS X and Ubuntu):</description></item><item><title>SSH Config Aliases</title><link>/ssh-config/</link><pubDate>Thu, 20 Jun 2013 00:00:00 +0000</pubDate><guid>/ssh-config/</guid><description>If your like me and you deal with a lot of servers for development or test and do it from a Unix machine, I&amp;rsquo;ve got a really handy tip: SSH hostname pattern matching.
Say I&amp;rsquo;ve got a SSH config file like this (at ~/.ssh/config ):
host s* HostName atrcu%h.example.com User example1 Port 22 host b* HostName atrcx%h.example.com User example2 Port 22 host ??* HostName atvts%h.example.com User example5 Port 2205 The ssh man page explains this really well:</description></item><item><title>Custom Colourful Bash Prompt</title><link>/colour-bash/</link><pubDate>Fri, 10 May 2013 00:00:00 +0000</pubDate><guid>/colour-bash/</guid><description>Bash, a command line shell is one of the most used pieces of software in my daily work. I like scripting repetitive actions to save a lot time (it brings me great joy!). One of the simplest and easiest customisations is to add a bit of colour to your otherwise boring bash prompt (otherwise known as $PS1):
[ngrogan@localhost:~]$ can be turned in to this:
The thing about Bash is the colour codes to achieve this can look archaic:</description></item><item><title>SSH Guide</title><link>/ssh-guide/</link><pubDate>Mon, 17 Nov 2008 00:00:00 +0000</pubDate><guid>/ssh-guide/</guid><description>**Note: This Guide was written for use by my Computer Science class on Linux (and Mac OS X where noted). I haven&amp;rsquo;t used SSH on Windows; but hopefully someone can make sure this guide works also on Windows by noting differences). SSH comes with nearly all Linux distros and all Mac OS X releases.
**
OS Specific Colours: Linux - Mac OS X - Windows
**
**
**Download SSH For Windows</description></item></channel></rss>