<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>automation on Neil Grogan</title><link>/tags/automation/</link><description>Recent content in automation on Neil Grogan</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 13 May 2019 00:00:00 +0000</lastBuildDate><atom:link href="/tags/automation/index.xml" rel="self" type="application/rss+xml"/><item><title>Scraping Transaction Data from KBC Bank</title><link>/kbc-tx-js/</link><pubDate>Mon, 13 May 2019 00:00:00 +0000</pubDate><guid>/kbc-tx-js/</guid><description>In a previous post, I mentioned importing transactions using ledger/hledger and plain text accounting. As my former bank PTSB recently raised their fees, I decided to move to KBC. I was excited to see, as part of the open payments directive, they have a nice developer portal. I reached out to KBC&amp;rsquo;s dev team, but alas they are only accepting registered companies, who meet stringent criteria. They told me they hope to open it up soon to end users, I live in hope!</description></item><item><title>Scraping Data from your Bank in Python</title><link>/bank-tx-py/</link><pubDate>Wed, 12 Jul 2017 00:00:00 +0000</pubDate><guid>/bank-tx-py/</guid><description>As part of my previous posts, I talked about ledger and plain text accounting. The only part missing is that you need a method to import transactions from your bank. For this I have been doing this by hand, bi-weekly. I would have to do the following:
Log in to online banking Go to the transactions page Select the date range for transactions I needed (double check last date of transaction in ledger at this point) Download the Microsoft Excel format file that wasn&amp;rsquo;t in the proper format Convert this Excel file into a CSV file that matched my import format (watch the dates, is it YYYY-MM-DD or DD/MM/YYYY?</description></item><item><title>Slack Bots for Work</title><link>/slack-bot/</link><pubDate>Thu, 16 Feb 2017 00:00:00 +0000</pubDate><guid>/slack-bot/</guid><description>In a previous post, I mentioned how I get notified of the restaurant menu via a Ruby script. Recently I&amp;rsquo;ve moved to a totally different product area and the main communication channel we use is Slack. Naturally enough, I ported the Ruby code I wrote, and it now posts the menu every day to our Slack channel.
This also got me thinking of what other information would be handy to have.</description></item><item><title>Automatic Newsletter Cleanup in Gmail</title><link>/gmail-newsletter-filter/</link><pubDate>Fri, 19 Aug 2016 00:00:00 +0000</pubDate><guid>/gmail-newsletter-filter/</guid><description>If you haven&amp;rsquo;t tried Google Apps Script, I found a really nifty use for it: smart filtering for email. Wait, shouldn&amp;rsquo;t I just use Gmails&amp;rsquo; built-in filters? As it turns out you can&amp;rsquo;t - my filter needs to act on email that matched that filter in the past. So in other words: a filter can only act on email it actually &amp;ldquo;filters&amp;rdquo;, which kinda makes sense! I&amp;rsquo;m a big fan of automation (and email is ripe for automation), as you can see from my post on meetings in Outlook.</description></item><item><title>Fill hours worked in SAP Netweaver Automatically</title><link>/autohours/</link><pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate><guid>/autohours/</guid><description>Continuing the theme of automation, one of the most repetitive tasks if you work for a big company is timesheets. So I set out to rectify this by scripting it!
Start with you configuration, I named mine hours.ini:
[DEFAULT] url = FILL_ME_IN username = FILL_ME_IN password = FILL_ME_IN then we need the magic of Selenium to do the heavy lifting, so we install it:
$ pip3 install selenium I called this script, unsurprisingly hours.</description></item><item><title>Automated 'Push' Restaurant menu</title><link>/rest-menu/</link><pubDate>Sun, 10 Jan 2016 00:00:00 +0000</pubDate><guid>/rest-menu/</guid><description>I love trying to automate the world, it just feels like magic some of the time! I also really enjoy information coming to me, instead of having to seek it. As we are still only in 2016, we have no world killing Artificial Intelligence (yet). So we have to start small, ease the first world problems! So I decided to make my workplaces&amp;rsquo; restaurant menu come to me!
I decided to write it in Ruby and use push notifications, rather than email or SMS.</description></item></channel></rss>